/**************************CrowPanel ESP32 HMI Display Example Code************************
Version     :	1.0
Suitable for:	CrowPanel ESP32 HMI Display
Product link:	https://www.elecrow.com/esp32-display-series-hmi-touch-screen.html
Code	  link:	https://github.com/Elecrow-RD/CrowPanel-ESP32-Display-Course-File
Lesson	link:	https://www.youtube.com/watch?v=WHfPH-Kr9XU
Description	:	The code is currently available based on the course on YouTube,
				        if you have any questions, please refer to the course video: Introduction
				        to ask questions or feedback.
**************************************************************/

#include <Arduino.h>
#include <Wire.h>
#include <SPI.h>

/**************************LVGL and UI************************
if you want to use the LVGL demo. you need to include <demos/lv_demos.h> and <examples/lv_examples.h>.
if not, please do not include it. It will waste your Flash space.
**************************************************************/
#include <lvgl.h>
#include "ui.h"
#include "touch.h"

// #include <demos/lv_demos.h>
// #include <examples/lv_examples.h>

/**************************LVGL and UI END************************/

unsigned long counter = 0;

/*******************************************************************************
   Config the display panel and touch panel in gfx_conf.h
 ******************************************************************************/
#include "gfx_conf.h"
#include "HX711.h"


// HX711 initialization
const int LOADCELL_DOUT_PIN = 37;
const int LOADCELL_SCK_PIN = 38;
HX711 scale;

float calibration_factor = 2280.0; // Placeholder calibration factor, replace with your actual calibration factor
unsigned long counter = 0;


static lv_disp_draw_buf_t draw_buf;
static lv_color_t disp_draw_buf1[screenWidth * screenHeight / 8];
static lv_color_t disp_draw_buf2[screenWidth * screenHeight / 8];
static lv_disp_drv_t disp_drv;

/* Display flushing */
void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p) {
   uint32_t w = ( area->x2 - area->x1 + 1 );
   uint32_t h = ( area->y2 - area->y1 + 1 );

   tft.pushImageDMA(area->x1, area->y1, w, h,(lgfx::rgb565_t*)&color_p->full);

   lv_disp_flush_ready( disp );

}

void my_touchpad_read(lv_indev_drv_t *indev_driver, lv_indev_data_t *data) {
   uint16_t touchX, touchY;
   bool touched = tft.getTouch( &touchX, &touchY);
   if( !touched )
   {
      data->state = LV_INDEV_STATE_REL;
   }
   else
   {
      data->state = LV_INDEV_STATE_PR;

      /*Set the coordinates*/
      data->point.x = touchX;
      data->point.y = touchY;

      Serial.print( "Data x " );
      Serial.println( touchX );

      Serial.print( "Data y " );
      Serial.println( touchY );
   }
}


void setup() {

   Serial.begin(115200);
   Serial.println("Start");

   // HX711 initialization
   scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);

   //Display Prepare
   tft.begin();
   tft.fillScreen(TFT_BLACK);
   tft.setTextSize(2);

   delay(200);

   lv_init();

   delay(100);

   lv_disp_draw_buf_init(&draw_buf, disp_draw_buf1, disp_draw_buf2, screenWidth * screenHeight/8);
   /* Initialize the display */
   lv_disp_drv_init(&disp_drv);
   /* Change the following line to your display resolution */
   disp_drv.hor_res = screenWidth;
   disp_drv.ver_res = screenHeight;
   disp_drv.flush_cb = my_disp_flush;
   disp_drv.full_refresh = 1;
   disp_drv.draw_buf = &draw_buf;
   lv_disp_drv_register(&disp_drv);

   /* Initialize the (dummy) input device driver */
   static lv_indev_drv_t indev_drv;
   lv_indev_drv_init(&indev_drv);
   indev_drv.type = LV_INDEV_TYPE_POINTER;
   indev_drv.read_cb = my_touchpad_read;
   lv_indev_drv_register(&indev_drv);

   tft.fillScreen(TFT_BLACK);

   //please do not use LVGL Demo and UI export from Squareline Studio in the same time.
   // lv_demo_widgets();    // LVGL demo
   ui_init();
   Serial.println( "Setup done" );
}

void loop() {
    lv_timer_handler();
    delay(5);

    // Log the weight in grams
    if (scale.is_ready()) {
        float weight = scale.get_units(10); // Get the average of 10 readings
        Serial.print("Weight: ");
        Serial.print(weight);
        Serial.println(" grams");
    } else {
        Serial.println("HX711 not found.");
    }

    delay(1000); // Log weight every second
}
